const common = require('./common');
const tao = require('./stable_sort');

String.prototype.replaceAll = function (search, replacement) {
    var target = this;
    return target.split(search).join(replacement);
};

function get_level_str(l, levels) {
	var x = levels[l];
	if (x == undefined) {
		x = Object.keys(levels).length
		levels[l] = x;
		return String.raw`(?<l${x}>[0-9]+)`;
	} else {
		return String.raw`\k<l${x}>`;
	}
}

function get_number_str(n, nums) {
	var x = nums[n];
	if (x == undefined) {
		x = Object.keys(nums).length
		nums[n] = x;
		return String.raw`(?<n${x}>[0-9]+)`;
	} else {
		return String.raw`\k<n${x}>`;
	}
}

function replaces(str, pattern) {
	var levels = {};
	var numbers = {};
	
    var m;
    do {
        var re = new RegExp(pattern, "g");
        m = re.exec(str);
        if (m) {
			var complete = m[0];
			var l = m[1];
			var n0 = m[3];
			var n1 = m[4];
			var n2 = m[5];
			
			var l_str = get_level_str(l, levels);
			
			if (!n2) {
				var n0_str = get_number_str(n0, numbers);
				var n1_str = get_number_str(n1, numbers);
				var tmp = String.raw`\[${l_str}\,\[${n0_str}\,${n1_str}\]\]`
			} else {
				var n2_str = get_number_str(n2, numbers);
				var tmp = String.raw`\[${l_str}\,${n2_str}\]`
			}

            str = str.replace(complete, tmp)
        }
    } while (m);

    return str;
}

function get_variable_name(i) {
    return String.fromCharCode(97 + Number(i) - 1);
}

function get_variable_name_translate(i, vars) {
    var x = vars[i] + 1;
    var ret = get_variable_name(x);
    return ret;
}

function add_to_dic(dic, x) {
    if (!(x in dic)) {
        dic[x] = Object.keys(dic).length;
    }
}

function get_variables_old(pattern_arr) {
    var dic = {};
    for (let i = 0; i < pattern_arr.length; i++) {
        const element = pattern_arr[i];
        if (element.length > 1) {

            if (Array.isArray(element[1])) {
                add_to_dic(dic, element[1][0]);
                add_to_dic(dic, element[1][1]);
            } else {
                add_to_dic(dic, element[1]);
            }
        }
    }
    return dic;
}

function get_variables(precons, pattern_arr) {
    var dic = {};

    for (let i = 0; i < precons.length; i++) {
        const element = precons[i];
        add_to_dic(dic, element[0]);
        add_to_dic(dic, element[1]);
    }

    for (let i = 0; i < pattern_arr.length; i++) {
        const element = pattern_arr[i];
        if (element.length > 1) {

            if (Array.isArray(element[1])) {
                add_to_dic(dic, element[1][0]);
                add_to_dic(dic, element[1][1]);
            } else {
                add_to_dic(dic, element[1]);
            }
        }
    }
    return dic;
}


function analyze_pattern(pattern_arr) {
    // get_variables(pattern_arr);

    const internal_pattern = String.raw`\\\[(?<l>[0-9]+)\\\,(\\\[(?<n0>[0-9]+)\\\,(?<n1>[0-9]+)\\\]|(?<n2>[0-9]+))\\\]`;

    var raw_pattern = JSON.stringify(pattern_arr).substr(1).slice(0, -1); 
    // console.log(raw_pattern);

    var pattern = raw_pattern.replaceAll("[", '\\[');
    pattern = pattern.replaceAll("]", '\\]');
    pattern = pattern.replaceAll(",", '\\,');
    // console.log(pattern)

    const xxx = replaces(pattern, internal_pattern);
    // console.log(xxx);
    return xxx;
}

function generate_code(n, nodes, index, level, comps, vars) {
    const indent_level = ' '.repeat((level + 1) * 4);
    const indent_1 = ' '.repeat(4);

    var pair_left = nodes[index][1];

    if ( ! Array.isArray(pair_left)) {
        var median_left = pair_left;

        var code = `${indent_level}${indent_1}return ${get_variable_name_translate(median_left, vars)};`
        return code;
    }

    var pair_right = pair_left.slice().reverse();

    var code_if = generate_code(n, nodes, index + 1, level + 1, comps, vars);

    // var level_inverse = comps - level - 1;
    var level_inverse = comps - level;
    var else_inc = Math.pow(2, level_inverse);


    var code_else = generate_code(n, nodes, index + else_inc, level + 1, comps, vars);

    var code = `${indent_level}if ( ! r(${get_variable_name_translate(pair_left[1], vars)}, ${get_variable_name_translate(pair_left[0], vars)})) {
${code_if}
${indent_level}} else {
${code_else}
${indent_level}}`;
    
    return code;
}

class Node  { 
    constructor(data) { 
        this.data = data; 
        this.left = null; 
        this.right = null; 
        this.parent = null;
    } 
} 

function generate_tree(nodes, index, level, comps) {
    var pair_left = nodes[index][1];

    if ( ! Array.isArray(pair_left)) {
        return new Node(index)
    }


    var if_branch = generate_tree(nodes, index + 1, level + 1, comps);

    // var level_inverse = comps - level - 1;
    var level_inverse = comps - level;
    var else_inc = Math.pow(2, level_inverse);


    var else_branch = generate_tree(nodes, index + else_inc, level + 1, comps);

    var node = new Node(index)
    node.left = if_branch;
    node.right = else_branch;

    if_branch.parent = node;
    else_branch.parent = node;

    
    return node;
}

function get_ancestors(node) {

    if (node.parent == null) {
        return [];
    }
    var preconds = get_ancestors(node.parent);

    var parent = node.parent;
    if (parent.left == node) {
        return [...preconds, { i: parent.data, left: true }];
    }

    if (parent.right == node) {
        return [...preconds, { i: parent.data, left: false }];
    }

    console.log("no deberia entrar acÃ¡")
}

function get_level_nodes(root, level, data) {
    var data_node = data[root.data];

    if (data_node.length > 0) {
        if (data_node[0] == level) {
            return [root];
        }
    }

    var left = get_level_nodes(root.left, level, data);
    var right = get_level_nodes(root.right, level, data);

    var ret = [...left, ...right];
    return ret;
}

function exists_vars(elem, vars) {
    if (elem.length <= 1) return false;

    if (Array.isArray(elem[1])) {
        var ret = (elem[1][0] in vars) && (elem[1][1] in vars);
        return ret
    } else {
        var ret = elem[1] in vars;
        return ret
    }
}

function filter_ancestors(preconds, vars, data) {
    var res = [];

    for (let i = 0; i < preconds.length; i++) {
        const p = preconds[i];
        const e = data[p.i];
        
        if (exists_vars(e, vars)) {
            res.push(p);
        }
    }

    return res;
}

function get_ancestors_filtered(node, vars, data) {
    var x = get_ancestors(node);
    var filtered = filter_ancestors(x, vars, data);
    return filtered;
}

function get_preconditions(node, vars, data, precons_fixed) {
    var ancestors = get_ancestors_filtered(node, vars, data);
    var res = [...precons_fixed];
    for (let i = 0; i < ancestors.length; i++) {
        const a = ancestors[i];

        var pair = data[a.i][1];
        if (!a.left) {
            pair = pair.slice().reverse();
        }
        res.push(pair);
    }

    tao.stable_sort(res, function(a, b){return a[1] < b[1];});
    tao.stable_sort(res, function(a, b){return a[0] < b[0];});

    return res;
}

function get_precondition_str(preconds, vars) {
    var res = "";

    for (let i = 0; i < precons.length; i++) {
        const p = precons[i];
        const left = get_variable_name_translate(p[0], vars);
        const right = get_variable_name_translate(p[1], vars);

        res += left + right + "_";
        // res.push([left, right]);
    }
    return res.slice(0, -1);
}

function get_parameter_list(vars) {
    // Create items array
    var items = Object.keys(vars).map(function(key) {
        return [key, vars[key]];
    });

    // Sort the array based on the second element
    items.sort(function(first, second) {
        return first[1] - second[1];
    });


    var res = "";
    for (let i = 0; i < items.length; i++) {
        const element = items[i];
        res += get_variable_name(element[0]) + ",";

    }

    return res.slice(0, -1);
}

function get_constraints(precons, pattern_arr, comps) {

    var res = [...precons];

    for (let i = 0; i < comps + 1; i++) {
        const elem = pattern_arr[i];

        if (elem.length > 1) {
            if (Array.isArray(elem[1])) {
                res.push(elem[1])
            } else {
                return {c: res, final: elem[1]}
            }
        }
    }

    return res;
}

class AnalysisNode  { 
    constructor(i) { 
        this.i = i; 
        this.greater = []; 
        this.less = []; 
    } 
} 

function search_in_tree(node, x) {
    for (let i = 0; i < node.greater.length; i++) {
        const n = node.greater[i];
        if (n.i == x) return n;
        var res = search_in_tree(n, x);
        // console.log(res);
        if (res != null) return res;
    }
    return null;
}

function search_in_roots(roots, x) {
    var index = roots.findIndex((e) => e.i == x);
    if (index != -1) return { i: index, node: roots[index] };

    for (let i = 0; i < roots.length; i++) {
        const e = roots[i];
        var res = search_in_tree(e, x);
        // console.log(res);
        if (res != null) return { i: -1, node: res };
    }
    return null;
}
function unlink_tree(node, x) {
    for (let i = 0; i < node.less.length; i++) {
        const n = node.less[i];

        var to_remove = [];
        for (let j = 0; j < n.greater.length; j++) {
            const e = n.greater[j];
            if (e.i == x) {
                to_remove.push(j);
            }
        }

        for (let j = 0; j < to_remove.length; j++) {
            const e = to_remove[j];
            n.greater.splice(e, 1);
        }
    }
}

function where_is_final_backwards(roots, node, final, count, branch) {
    for (let i = 0; i < node.less.length; i++) {
        const n = node.less[i];
        if (n.i == final) return n;
        var res = where_is_final_recursive(n, final, count + 1, [...branch, n]);
        // console.log(res);
        if (res != null) {

        };
    }
    return null;
}

function where_is_final_recursive(roots, node, final, count, branch) {
    var min = null;
    for (let i = 0; i < node.greater.length; i++) {
        const n = node.greater[i];
        if (n.i == final) {
            // return count;
            if (min == null) min = count;
            if (count < min) min = count;
        } else {
            var res = where_is_final_recursive(roots, n, final, count + 1, [...branch, n]);
            if (res != null) {
                if (min == null) min = res;
                if (res < min) min = res;
            }
        }
    }
    return min;
}

function where_is_final(roots, final) {
    var count = 0;
    for (let i = 0; i < roots.length; i++) {
        const e = roots[i];
        if (e.i == final) {
            return 0;
        }
        var res = where_is_final_recursive(roots, e, final, 1, [e]);
        if (res != null) {
            count += res;
        } else {
            console.log("error")
        }
    }
    return count;

}

function analysis(n, vars, constraints, final) {
    var roots = [];
    
    for (var k in vars) {
        roots.push(new AnalysisNode(k));
    }

    // console.log(roots)

    for (let i = 0; i < constraints.length; i++) {
        const e = constraints[i];
        // console.log(e)

        // if (e[0] == 3 && e[1] == 4) {
        //     console.log();
        // }

        var left = search_in_roots(roots, e[0])
        var right = search_in_roots(roots, e[1])

        if (right.i != -1) {
            roots.splice(right.i, 1);
        } else {
            // unlink_tree(left.node, right.node.i);
        }
        left.node.greater.push(right.node);
        right.node.less.push(left.node);

        
        // console.log(JSON.stringify(roots))
        // console.log(roots)
    }


    var res = where_is_final(roots, final);
    // console.log(res);
    return res;
}

// ---------------------------------------------------------------
// n=7 complete
// var data_s = "[[0,[1,2]],[1,[3,4]],[2,[2,4]],[3,[5,6]],[4,[2,6]],[5,[2,5]],[6,[5,7]],[7,[3,5]],[8,[4,5]],[9,4],[],[],[9,5],[],[],[8,[3,6]],[9,[3,7]],[10,3],[10,7],[9,[6,7]],[10,6],[10,7],[7,[2,7]],[8,[3,7]],[9,[4,7]],[10,4],[10,7],[9,[3,5]],[10,3],[10,5],[8,[3,5]],[9,[2,3]],[10,3],[10,2],[9,5],[],[],[6,[3,7]],[7,[2,7]],[8,[3,6]],[9,[2,3]],[10,3],[10,2],[9,6],[],[],[8,[5,7]],[9,[1,7]],[10,7],[10,1],[9,[1,5]],[10,5],[10,1],[7,[2,3]],[8,[2,7]],[9,[6,7]],[10,6],[10,7],[9,2],[],[],[8,[3,5]],[9,[1,5]],[10,5],[10,1],[9,[1,3]],[10,3],[10,1],[5,[1,3]],[6,[3,7]],[7,[3,5]],[8,[5,7]],[9,[6,7]],[10,6],[10,7],[9,5],[],[],[8,[3,6]],[9,[6,7]],[10,6],[10,7],[9,[2,3]],[10,2],[10,3],[7,[6,7]],[8,[2,7]],[9,2],[],[],[9,[1,7]],[10,7],[10,1],[8,[3,6]],[9,[3,5]],[10,5],[10,3],[9,[1,6]],[10,6],[10,1],[6,[3,5]],[7,[1,7]],[8,[6,7]],[9,[1,6]],[10,6],[10,1],[9,[5,7]],[10,7],[10,5],[8,[1,6]],[9,[1,5]],[10,5],[10,1],[9,[6,7]],[10,7],[10,6],[7,[6,7]],[8,[1,7]],[9,[1,6]],[10,6],[10,1],[9,[3,7]],[10,7],[10,3],[8,[1,6]],[9,[1,7]],[10,7],[10,1],[9,[3,6]],[10,6],[10,3],[4,[2,5]],[5,[2,6]],[6,[3,7]],[7,[6,7]],[8,[3,6]],[9,[4,6]],[10,4],[10,6],[9,[3,5]],[10,3],[10,5],[8,[2,7]],[9,[4,7]],[10,4],[10,7],[9,2],[],[],[7,[3,5]],[8,[3,6]],[9,[2,3]],[10,3],[10,2],[9,[6,7]],[10,7],[10,6],[8,[5,7]],[9,5],[],[],[9,[6,7]],[10,7],[10,6],[6,[3,7]],[7,[2,7]],[8,[3,5]],[9,[2,3]],[10,3],[10,2],[9,5],[],[],[8,[1,6]],[9,[6,7]],[10,7],[10,6],[9,[1,7]],[10,7],[10,1],[7,[2,3]],[8,[5,7]],[9,5],[],[],[9,[2,7]],[10,7],[10,2],[8,[1,3]],[9,[3,6]],[10,6],[10,3],[9,[1,6]],[10,6],[10,1],[5,[3,5]],[6,[1,3]],[7,[5,7]],[8,5],[],[],[],[],[],[],[8,[3,6]],[9,[6,7]],[10,7],[10,6],[9,[3,7]],[10,7],[10,3],[7,[1,7]],[8,[5,7]],[9,[1,5]],[10,5],[10,1],[9,[6,7]],[10,7],[10,6],[8,[1,5]],[9,[1,6]],[10,6],[10,1],[9,[5,7]],[10,7],[10,5],[6,[5,7]],[7,[3,7]],[8,[1,3]],[9,[2,3]],[10,2],[10,3],[9,[1,7]],[10,1],[10,7],[8,[1,7]],[9,[2,7]],[10,2],[10,7],[9,[1,3]],[10,1],[10,3],[7,[1,3]],[8,[1,5]],[9,5],[],[],[9,1],[],[],[8,3],[],[],[],[],[],[],[3,[5,6]],[4,[1,7]],[5,[4,6]],[6,[4,5]],[7,[5,7]],[8,[1,5]],[9,[2,5]],[10,2],[10,5],[9,[1,6]],[10,1],[10,6],[8,[2,7]],[9,2],[],[],[9,[4,7]],[10,7],[10,4],[7,[4,7]],[8,[1,4]],[9,4],[],[],[9,[1,6]],[10,1],[10,6],[8,[3,5]],[9,[5,7]],[10,7],[10,5],[9,[3,7]],[10,7],[10,3],[6,[1,3]],[7,[3,7]],[8,[6,7]],[9,[3,6]],[10,6],[10,3],[9,[5,7]],[10,7],[10,5],[8,[3,6]],[9,[3,5]],[10,5],[10,3],[9,[6,7]],[10,7],[10,6],[7,[5,7]],[8,[1,6]],[9,[6,7]],[10,6],[10,7],[9,[1,4]],[10,1],[10,4],[8,5],[],[],[],[],[],[],[5,[3,5]],[6,[5,7]],[7,[4,6]],[8,[4,7]],[9,[6,7]],[10,6],[10,7],[9,[1,4]],[10,1],[10,4],[8,[6,7]],[9,[4,7]],[10,4],[10,7],[9,[1,6]],[10,1],[10,6],[7,[1,4]],[8,[1,5]],[9,[4,5]],[10,4],[10,5],[9,[1,6]],[10,1],[10,6],[8,[4,5]],[9,[1,5]],[10,1],[10,5],[9,[4,6]],[10,4],[10,6],[6,[1,4]],[7,[3,6]],[8,[1,6]],[9,[1,3]],[10,3],[10,1],[9,[6,7]],[10,7],[10,6],[8,[1,3]],[9,[1,6]],[10,6],[10,1],[9,[3,7]],[10,7],[10,3],[7,[6,7]],[8,[4,7]],[9,[4,6]],[10,6],[10,4],[9,[3,7]],[10,7],[10,3],[8,[4,6]],[9,[4,7]],[10,7],[10,4],[9,[3,6]],[10,6],[10,3],[4,[4,5]],[5,[1,4]],[6,[6,7]],[7,[4,7]],[8,[2,6]],[9,2],[],[],[9,[4,6]],[10,6],[10,4],[8,[1,3]],[9,[3,7]],[10,7],[10,3],[9,[1,7]],[10,7],[10,1],[7,[4,6]],[8,[2,7]],[9,2],[],[],[9,[4,7]],[10,7],[10,4],[8,[1,3]],[9,[3,6]],[10,6],[10,3],[9,[1,6]],[10,6],[10,1],[6,[1,7]],[7,[2,6]],[8,[2,7]],[9,2],[],[],[9,7],[],[],[8,[1,6]],[9,[6,7]],[10,6],[10,7],[9,[1,5]],[10,1],[10,5],[7,[4,6]],[8,[6,7]],[9,[5,7]],[10,5],[10,7],[9,[1,6]],[10,1],[10,6],[8,[5,7]],[9,5],[],[],[9,[4,7]],[10,7],[10,4],[5,[3,5]],[6,[1,7]],[7,[5,7]],[8,[1,4]],[9,[1,5]],[10,5],[10,1],[9,4],[],[],[8,[3,6]],[9,[6,7]],[10,7],[10,6],[9,[3,7]],[10,7],[10,3],[7,[1,5]],[8,[1,3]],[9,[3,6]],[10,6],[10,3],[9,[1,6]],[10,6],[10,1],[8,[5,7]],[9,[4,7]],[10,4],[10,7],[9,5],[],[],[6,[1,3]],[7,[5,7]],[8,[1,7]],[9,[3,7]],[10,3],[10,7],[9,1],[],[],[8,[1,5]],[9,5],[],[],[9,1],[],[],[7,[1,4]],[8,[1,7]],[9,1],[],[],[9,[3,7]],[10,7],[10,3],[8,[3,7]],[9,[4,7]],[10,4],[10,7],[9,3],[],[],[2,[5,6]],[3,[2,6]],[4,[5,7]],[5,[2,7]],[6,[2,4]],[7,[4,5]],[8,[3,5]],[9,3],[],[],[9,5],[],[],[8,[4,6]],[9,[4,7]],[10,4],[10,7],[9,[6,7]],[10,6],[10,7],[7,[3,5]],[8,[2,5]],[9,[2,3]],[10,3],[10,2],[9,[1,5]],[10,5],[10,1],[8,[2,3]],[9,[2,5]],[10,5],[10,2],[9,[1,3]],[10,3],[10,1],[6,[1,3]],[7,[4,7]],[8,[3,7]],[9,[3,5]],[10,5],[10,3],[9,[1,7]],[10,7],[10,1],[8,[2,4]],[9,2],[],[],[9,[1,4]],[10,4],[10,1],[7,[3,5]],[8,[1,5]],[9,5],[],[],[9,[1,7]],[10,1],[10,7],[8,[1,7]],[9,1],[],[],[9,[3,7]],[10,7],[10,3],[5,[2,5]],[6,[2,4]],[7,[3,5]],[8,[3,7]],[9,3],[],[],[9,[4,7]],[10,7],[10,4],[8,[4,5]],[9,[4,7]],[10,7],[10,4],[9,5],[],[],[7,[3,7]],[8,[2,7]],[9,[2,3]],[10,3],[10,2],[9,[1,7]],[10,7],[10,1],[8,[2,3]],[9,[2,7]],[10,7],[10,2],[9,[1,3]],[10,3],[10,1],[6,[3,5]],[7,[1,3]],[8,[3,7]],[9,7],[],[],[9,3],[],[],[8,[1,5]],[9,[1,7]],[10,7],[10,1],[9,5],[],[],[7,[4,5]],[8,[1,3]],[9,[1,5]],[10,5],[10,1],[9,3],[],[],[8,[1,4]],[9,[2,4]],[10,2],[10,4],[9,[1,3]],[10,1],[10,3],[4,[3,6]],[5,[3,5]],[6,[1,3]],[7,[5,7]],[8,5],[],[],[],[],[],[],[8,[3,7]],[9,7],[],[],[9,3],[],[],[7,[1,7]],[8,[1,5]],[9,[5,7]],[10,5],[10,7],[9,[1,6]],[10,1],[10,6],[8,[5,7]],[9,[6,7]],[10,6],[10,7],[9,[1,5]],[10,1],[10,5],[6,[1,7]],[7,[3,7]],[8,[1,3]],[9,3],[],[],[9,[1,6]],[10,1],[10,6],[8,[5,7]],[9,[4,7]],[10,7],[10,4],[9,[4,5]],[10,5],[10,4],[7,[1,3]],[8,[4,5]],[9,[1,5]],[10,5],[10,1],[9,[1,4]],[10,4],[10,1],[8,[3,7]],[9,[6,7]],[10,6],[10,7],[9,3],[],[],[5,[1,4]],[6,[4,7]],[7,[2,4]],[8,2],[],[],[],[],[],[],[8,[6,7]],[9,[4,6]],[10,6],[10,4],[9,[5,7]],[10,7],[10,5],[7,[6,7]],[8,[2,7]],[9,2],[],[],[9,[1,7]],[10,7],[10,1],[8,[4,6]],[9,[4,5]],[10,5],[10,4],[9,[1,6]],[10,6],[10,1],[6,[1,7]],[7,[1,3]],[8,[6,7]],[9,[1,6]],[10,6],[10,1],[9,[5,7]],[10,7],[10,5],[8,3],[],[],[],[],[],[],[7,[6,7]],[8,[3,7]],[9,3],[],[],[9,[4,7]],[10,7],[10,4],[8,[1,6]],[9,[1,5]],[10,5],[10,1],[9,[4,6]],[10,6],[10,4],[3,[2,5]],[4,[2,3]],[5,[2,4]],[6,[4,7]],[7,[3,6]],[8,[3,7]],[9,3],[],[],[9,7],[],[],[8,[4,6]],[9,[6,7]],[10,6],[10,7],[9,[4,5]],[10,4],[10,5],[7,[2,6]],[8,[6,7]],[9,[5,7]],[10,5],[10,7],[9,[4,6]],[10,4],[10,6],[8,[5,7]],[9,5],[],[],[9,[2,7]],[10,7],[10,2],[6,[6,7]],[7,[2,7]],[8,[2,6]],[9,[3,6]],[10,3],[10,6],[9,2],[],[],[8,[1,4]],[9,[4,7]],[10,7],[10,4],[9,[1,7]],[10,7],[10,1],[7,[2,6]],[8,[2,7]],[9,[3,7]],[10,3],[10,7],[9,2],[],[],[8,[1,4]],[9,[4,6]],[10,6],[10,4],[9,[1,6]],[10,6],[10,1],[5,[1,3]],[6,[6,7]],[7,[3,7]],[8,[2,6]],[9,2],[],[],[9,[3,6]],[10,6],[10,3],[8,[1,4]],[9,[4,7]],[10,7],[10,4],[9,[1,7]],[10,7],[10,1],[7,[3,6]],[8,[2,7]],[9,2],[],[],[9,[3,7]],[10,7],[10,3],[8,[1,4]],[9,[4,6]],[10,6],[10,4],[9,[1,6]],[10,6],[10,1],[6,[2,6]],[7,[2,7]],[8,2],[],[],[],[],[],[],[8,[1,7]],[9,7],[],[],[9,1],[],[],[7,[6,7]],[8,[1,7]],[9,[1,6]],[10,6],[10,1],[9,[3,7]],[10,7],[10,3],[8,[1,6]],[9,[1,7]],[10,7],[10,1],[9,[3,6]],[10,6],[10,3],[4,[3,5]],[5,[1,3]],[6,[1,4]],[7,[6,7]],[8,[3,7]],[9,[3,6]],[10,6],[10,3],[9,[4,7]],[10,7],[10,4],[8,[3,6]],[9,[3,7]],[10,7],[10,3],[9,[4,6]],[10,6],[10,4],[7,[6,7]],[8,[3,7]],[9,[3,6]],[10,6],[10,3],[9,[1,7]],[10,7],[10,1],[8,[3,6]],[9,[3,7]],[10,7],[10,3],[9,[1,6]],[10,6],[10,1],[6,[5,7]],[7,[1,5]],[8,[1,6]],[9,6],[],[],[9,1],[],[],[8,5],[],[],[],[],[],[],[7,[6,7]],[8,[1,7]],[9,[1,6]],[10,6],[10,1],[9,[3,7]],[10,7],[10,3],[8,[1,6]],[9,[1,7]],[10,7],[10,1],[9,[3,6]],[10,6],[10,3],[5,[5,7]],[6,[1,4]],[7,[2,4]],[8,[2,7]],[9,2],[],[],[9,[1,7]],[10,7],[10,1],[8,[4,7]],[9,[4,5]],[10,5],[10,4],[9,[1,7]],[10,7],[10,1],[7,[1,3]],[8,[1,7]],[9,[1,5]],[10,5],[10,1],[9,[4,7]],[10,7],[10,4],[8,[3,7]],[9,3],[],[],[9,[4,7]],[10,7],[10,4],[6,[1,4]],[7,[4,5]],[8,[4,6]],[9,[6,7]],[10,7],[10,6],[9,[4,7]],[10,7],[10,4],[8,[1,5]],[9,5],[],[],[9,1],[],[],[7,[1,5]],[8,[1,6]],[9,[6,7]],[10,7],[10,6],[9,[1,7]],[10,7],[10,1],[8,[4,5]],[9,5],[],[],[9,4],[],[],[1,[3,4]],[2,[5,6]],[3,[2,5]],[4,[3,5]],[5,[5,7]],[6,[1,4]],[7,[1,5]],[8,[4,5]],[9,4],[],[],[9,5],[],[],[8,[1,6]],[9,[1,7]],[10,1],[10,7],[9,[6,7]],[10,6],[10,7],[7,[4,5]],[8,[1,5]],[9,1],[],[],[9,5],[],[],[8,[4,6]],[9,[4,7]],[10,4],[10,7],[9,[6,7]],[10,6],[10,7],[6,[1,4]],[7,[1,3]],[8,[3,7]],[9,[4,7]],[10,4],[10,7],[9,3],[],[],[8,[1,7]],[9,[4,7]],[10,4],[10,7],[9,[1,5]],[10,1],[10,5],[7,[2,4]],[8,[4,7]],[9,[1,7]],[10,1],[10,7],[9,[4,5]],[10,4],[10,5],[8,[2,7]],[9,[1,7]],[10,1],[10,7],[9,2],[],[],[5,[1,3]],[6,[5,7]],[7,[6,7]],[8,[1,6]],[9,[3,6]],[10,3],[10,6],[9,[1,7]],[10,1],[10,7],[8,[1,7]],[9,[3,7]],[10,3],[10,7],[9,[1,6]],[10,1],[10,6],[7,[1,5]],[8,5],[],[],[],[],[],[],[8,[1,6]],[9,1],[],[],[9,6],[],[],[6,[1,4]],[7,[6,7]],[8,[3,6]],[9,[1,6]],[10,1],[10,6],[9,[3,7]],[10,3],[10,7],[8,[3,7]],[9,[1,7]],[10,1],[10,7],[9,[3,6]],[10,3],[10,6],[7,[6,7]],[8,[3,6]],[9,[4,6]],[10,4],[10,6],[9,[3,7]],[10,3],[10,7],[8,[3,7]],[9,[4,7]],[10,4],[10,7],[9,[3,6]],[10,3],[10,6],[4,[2,3]],[5,[1,3]],[6,[2,6]],[7,[6,7]],[8,[1,6]],[9,[3,6]],[10,3],[10,6],[9,[1,7]],[10,1],[10,7],[8,[1,7]],[9,[3,7]],[10,3],[10,7],[9,[1,6]],[10,1],[10,6],[7,[2,7]],[8,[1,7]],[9,1],[],[],[9,7],[],[],[8,2],[],[],[],[],[],[],[6,[6,7]],[7,[3,6]],[8,[1,4]],[9,[1,6]],[10,1],[10,6],[9,[4,6]],[10,4],[10,6],[8,[2,7]],[9,[3,7]],[10,3],[10,7],[9,2],[],[],[7,[3,7]],[8,[1,4]],[9,[1,7]],[10,1],[10,7],[9,[4,7]],[10,4],[10,7],[8,[2,6]],[9,[3,6]],[10,3],[10,6],[9,2],[],[],[5,[2,4]],[6,[6,7]],[7,[2,6]],[8,[1,4]],[9,[1,6]],[10,1],[10,6],[9,[4,6]],[10,4],[10,6],[8,[2,7]],[9,2],[],[],[9,[3,7]],[10,7],[10,3],[7,[2,7]],[8,[1,4]],[9,[1,7]],[10,1],[10,7],[9,[4,7]],[10,4],[10,7],[8,[2,6]],[9,2],[],[],[9,[3,6]],[10,6],[10,3],[6,[4,7]],[7,[2,6]],[8,[5,7]],[9,[2,7]],[10,2],[10,7],[9,5],[],[],[8,[6,7]],[9,[4,6]],[10,6],[10,4],[9,[5,7]],[10,7],[10,5],[7,[3,6]],[8,[4,6]],[9,[4,5]],[10,5],[10,4],[9,[6,7]],[10,7],[10,6],[8,[3,7]],[9,7],[],[],[9,3],[],[],[3,[2,6]],[4,[3,6]],[5,[1,4]],[6,[1,7]],[7,[6,7]],[8,[1,6]],[9,[4,6]],[10,4],[10,6],[9,[1,5]],[10,1],[10,5],[8,[3,7]],[9,[4,7]],[10,4],[10,7],[9,3],[],[],[7,[1,3]],[8,3],[],[],[],[],[],[],[8,[6,7]],[9,[5,7]],[10,5],[10,7],[9,[1,6]],[10,1],[10,6],[6,[4,7]],[7,[6,7]],[8,[4,6]],[9,[1,6]],[10,1],[10,6],[9,[4,5]],[10,4],[10,5],[8,[2,7]],[9,[1,7]],[10,1],[10,7],[9,2],[],[],[7,[2,4]],[8,[6,7]],[9,[5,7]],[10,5],[10,7],[9,[4,6]],[10,4],[10,6],[8,2],[],[],[],[],[],[],[5,[3,5]],[6,[1,7]],[7,[1,3]],[8,[3,7]],[9,3],[],[],[9,[6,7]],[10,7],[10,6],[8,[4,5]],[9,[1,4]],[10,1],[10,4],[9,[1,5]],[10,1],[10,5],[7,[3,7]],[8,[5,7]],[9,[4,5]],[10,4],[10,5],[9,[4,7]],[10,4],[10,7],[8,[1,3]],[9,[1,6]],[10,6],[10,1],[9,3],[],[],[6,[1,3]],[7,[1,7]],[8,[5,7]],[9,[1,5]],[10,5],[10,1],[9,[6,7]],[10,7],[10,6],[8,[1,5]],[9,[1,6]],[10,6],[10,1],[9,[5,7]],[10,7],[10,5],[7,[5,7]],[8,[3,7]],[9,3],[],[],[9,7],[],[],[8,5],[],[],[],[],[],[],[4,[5,7]],[5,[2,5]],[6,[3,5]],[7,[4,5]],[8,[1,4]],[9,[1,3]],[10,3],[10,1],[9,[2,4]],[10,4],[10,2],[8,[1,3]],[9,3],[],[],[9,[1,5]],[10,1],[10,5],[7,[1,3]],[8,[1,5]],[9,5],[],[],[9,[1,7]],[10,1],[10,7],[8,[3,7]],[9,3],[],[],[9,7],[],[],[6,[2,4]],[7,[3,7]],[8,[2,3]],[9,[1,3]],[10,1],[10,3],[9,[2,7]],[10,2],[10,7],[8,[2,7]],[9,[1,7]],[10,1],[10,7],[9,[2,3]],[10,2],[10,3],[7,[3,5]],[8,[4,5]],[9,5],[],[],[9,[4,7]],[10,4],[10,7],[8,[3,7]],[9,[4,7]],[10,4],[10,7],[9,3],[],[],[5,[2,7]],[6,[1,3]],[7,[3,5]],[8,[1,7]],[9,[3,7]],[10,3],[10,7],[9,1],[],[],[8,[1,5]],[9,[1,7]],[10,7],[10,1],[9,5],[],[],[7,[4,7]],[8,[2,4]],[9,[1,4]],[10,1],[10,4],[9,2],[],[],[8,[3,7]],[9,[1,7]],[10,1],[10,7],[9,[3,5]],[10,3],[10,5],[6,[2,4]],[7,[3,5]],[8,[2,3]],[9,[1,3]],[10,1],[10,3],[9,[2,5]],[10,2],[10,5],[8,[2,5]],[9,[1,5]],[10,1],[10,5],[9,[2,3]],[10,2],[10,3],[7,[4,5]],[8,[4,6]],[9,[6,7]],[10,7],[10,6],[9,[4,7]],[10,7],[10,4],[8,[3,5]],[9,5],[],[],[9,3],[],[],[2,[2,4]],[3,[5,6]],[4,[4,5]],[5,[3,5]],[6,[1,3]],[7,[1,4]],[8,[3,7]],[9,3],[],[],[9,[4,7]],[10,7],[10,4],[8,[1,7]],[9,[3,7]],[10,3],[10,7],[9,1],[],[],[7,[5,7]],[8,[1,5]],[9,1],[],[],[9,5],[],[],[8,[1,7]],[9,1],[],[],[9,[3,7]],[10,7],[10,3],[6,[1,7]],[7,[1,5]],[8,[5,7]],[9,5],[],[],[9,[4,7]],[10,7],[10,4],[8,[1,3]],[9,[1,6]],[10,1],[10,6],[9,[3,6]],[10,3],[10,6],[7,[5,7]],[8,[3,6]],[9,[3,7]],[10,3],[10,7],[9,[6,7]],[10,6],[10,7],[8,[1,4]],[9,4],[],[],[9,[1,5]],[10,1],[10,5],[5,[1,4]],[6,[1,7]],[7,[4,6]],[8,[5,7]],[9,[4,7]],[10,4],[10,7],[9,5],[],[],[8,[6,7]],[9,[1,6]],[10,6],[10,1],[9,[5,7]],[10,7],[10,5],[7,[2,6]],[8,[1,6]],[9,[1,5]],[10,5],[10,1],[9,[6,7]],[10,7],[10,6],[8,[2,7]],[9,7],[],[],[9,2],[],[],[6,[6,7]],[7,[4,6]],[8,[1,3]],[9,[1,6]],[10,1],[10,6],[9,[3,6]],[10,3],[10,6],[8,[2,7]],[9,[4,7]],[10,4],[10,7],[9,2],[],[],[7,[4,7]],[8,[1,3]],[9,[1,7]],[10,1],[10,7],[9,[3,7]],[10,3],[10,7],[8,[2,6]],[9,[4,6]],[10,4],[10,6],[9,2],[],[],[4,[1,7]],[5,[3,5]],[6,[1,4]],[7,[6,7]],[8,[4,6]],[9,[3,6]],[10,3],[10,6],[9,[4,7]],[10,4],[10,7],[8,[4,7]],[9,[3,7]],[10,3],[10,7],[9,[4,6]],[10,4],[10,6],[7,[3,6]],[8,[1,3]],[9,[3,7]],[10,3],[10,7],[9,[1,6]],[10,1],[10,6],[8,[1,6]],[9,[6,7]],[10,6],[10,7],[9,[1,3]],[10,1],[10,3],[6,[5,7]],[7,[1,4]],[8,[4,5]],[9,[4,6]],[10,6],[10,4],[9,[1,5]],[10,5],[10,1],[8,[1,5]],[9,[1,6]],[10,6],[10,1],[9,[4,5]],[10,5],[10,4],[7,[4,6]],[8,[6,7]],[9,[1,6]],[10,6],[10,1],[9,[4,7]],[10,7],[10,4],[8,[4,7]],[9,[1,4]],[10,4],[10,1],[9,[6,7]],[10,7],[10,6],[5,[4,6]],[6,[1,3]],[7,[5,7]],[8,5],[],[],[],[],[],[],[8,[1,6]],[9,[1,4]],[10,4],[10,1],[9,[6,7]],[10,7],[10,6],[7,[3,7]],[8,[3,6]],[9,[6,7]],[10,6],[10,7],[9,[3,5]],[10,3],[10,5],[8,[6,7]],[9,[5,7]],[10,5],[10,7],[9,[3,6]],[10,3],[10,6],[6,[4,5]],[7,[4,7]],[8,[3,5]],[9,[3,7]],[10,3],[10,7],[9,[5,7]],[10,5],[10,7],[8,[1,4]],[9,[1,6]],[10,6],[10,1],[9,4],[],[],[7,[5,7]],[8,[2,7]],[9,[4,7]],[10,4],[10,7],[9,2],[],[],[8,[1,5]],[9,[1,6]],[10,6],[10,1],[9,[2,5]],[10,5],[10,2],[3,[5,6]],[4,[2,5]],[5,[3,5]],[6,[5,7]],[7,[1,3]],[8,3],[],[],[],[],[],[],[8,[1,5]],[9,1],[],[],[9,5],[],[],[7,[3,7]],[8,[1,7]],[9,[1,3]],[10,3],[10,1],[9,[2,7]],[10,7],[10,2],[8,[1,3]],[9,[1,7]],[10,7],[10,1],[9,[2,3]],[10,3],[10,2],[6,[1,3]],[7,[1,7]],[8,[1,5]],[9,[5,7]],[10,5],[10,7],[9,[1,6]],[10,1],[10,6],[8,[5,7]],[9,[6,7]],[10,6],[10,7],[9,[1,5]],[10,1],[10,5],[7,[5,7]],[8,[3,6]],[9,[3,7]],[10,3],[10,7],[9,[6,7]],[10,6],[10,7],[8,5],[],[],[],[],[],[],[5,[2,6]],[6,[3,7]],[7,[2,3]],[8,[1,3]],[9,[1,6]],[10,1],[10,6],[9,[3,6]],[10,3],[10,6],[8,[5,7]],[9,[2,7]],[10,2],[10,7],[9,5],[],[],[7,[2,7]],[8,[1,6]],[9,[1,7]],[10,1],[10,7],[9,[6,7]],[10,6],[10,7],[8,[3,5]],[9,5],[],[],[9,[2,3]],[10,2],[10,3],[6,[3,7]],[7,[3,5]],[8,[5,7]],[9,[6,7]],[10,6],[10,7],[9,5],[],[],[8,[3,6]],[9,[6,7]],[10,6],[10,7],[9,[2,3]],[10,2],[10,3],[7,[6,7]],[8,[2,7]],[9,2],[],[],[9,[4,7]],[10,7],[10,4],[8,[3,6]],[9,[3,5]],[10,5],[10,3],[9,[4,6]],[10,6],[10,4],[4,[2,6]],[5,[1,3]],[6,[3,5]],[7,[6,7]],[8,[1,6]],[9,[3,6]],[10,3],[10,6],[9,[1,7]],[10,1],[10,7],[8,[1,7]],[9,[3,7]],[10,3],[10,7],[9,[1,6]],[10,1],[10,6],[7,[1,7]],[8,[1,6]],[9,[6,7]],[10,6],[10,7],[9,[1,5]],[10,1],[10,5],[8,[6,7]],[9,[5,7]],[10,5],[10,7],[9,[1,6]],[10,1],[10,6],[6,[3,7]],[7,[6,7]],[8,[3,6]],[9,[1,6]],[10,1],[10,6],[9,[3,5]],[10,3],[10,5],[8,[2,7]],[9,[1,7]],[10,1],[10,7],[9,2],[],[],[7,[3,5]],[8,[3,6]],[9,[2,3]],[10,3],[10,2],[9,[6,7]],[10,7],[10,6],[8,[5,7]],[9,5],[],[],[9,[6,7]],[10,7],[10,6],[5,[2,5]],[6,[3,7]],[7,[2,3]],[8,[3,5]],[9,[1,3]],[10,1],[10,3],[9,[1,5]],[10,1],[10,5],[8,[2,7]],[9,2],[],[],[9,[6,7]],[10,7],[10,6],[7,[2,7]],[8,[5,7]],[9,[1,5]],[10,1],[10,5],[9,[1,7]],[10,1],[10,7],[8,[3,6]],[9,6],[],[],[9,[2,3]],[10,2],[10,3],[6,[5,7]],[7,[2,7]],[8,[3,5]],[9,5],[],[],[9,[2,3]],[10,2],[10,3],[8,[3,7]],[9,[3,5]],[10,5],[10,3],[9,[4,7]],[10,7],[10,4],[7,[3,5]],[8,[3,6]],[9,[6,7]],[10,7],[10,6],[9,[3,7]],[10,7],[10,3],[8,[4,5]],[9,5],[],[],[9,4],[],[]]";

// n=7 especial con 6 precondiciones: select_3_7_ac_bc_de_ae_bd_af
// var data_s = "[[0,[3,6]],[1,[3,7]],[2,[3,4]],[3,[4,6]],[4,[4,7]],[5,4],[5,7],[4,[6,7]],[5,6],[5,7],[3,[3,5]],[4,3],[],[],[4,5],[],[],[2,[1,4]],[3,[4,7]],[4,[5,7]],[5,5],[5,7],[4,[3,4]],[5,3],[5,4],[3,[1,7]],[4,[5,7]],[5,5],[5,7],[4,1],[],[],[1,[4,7]],[2,[6,7]],[3,[4,6]],[4,[5,6]],[5,5],[5,6],[4,[3,4]],[5,3],[5,4],[3,[1,7]],[4,[5,7]],[5,5],[5,7],[4,1],[],[],[2,[6,7]],[3,[2,7]],[4,[3,7]],[5,3],[5,7],[4,2],[],[],[3,[4,6]],[4,[1,4]],[5,4],[5,1],[4,[2,6]],[5,6],[5,2]]"
// var precons_fixed = [[1,3],[1,5],[1,6],[2,3],[2,4],[4,5]]

// n=7 especial con 5 precondiciones: select_4_7_abd_cd_ce_fb
// var data_s = "[[0,[1,3]],[1,[2,7]],[2,[4,5]],[3,[3,7]],[4,[4,7]],[5,4],[5,7],[4,3],[],[],[3,[5,7]],[4,[2,5]],[5,5],[5,2],[4,[3,7]],[5,7],[5,3],[2,[2,5]],[3,[2,3]],[4,3],[],[],[4,2],[],[],[3,[5,6]],[4,[6,7]],[5,7],[5,6],[4,[5,7]],[5,7],[5,5],[1,[5,7]],[2,[2,7]],[3,[2,5]],[4,[4,5]],[5,4],[5,5],[4,2],[],[],[3,[1,6]],[4,[6,7]],[5,7],[5,6],[4,[1,7]],[5,7],[5,1],[2,[2,5]],[3,[2,7]],[4,[4,7]],[5,4],[5,7],[4,2],[],[],[3,[1,5]],[4,[5,6]],[5,6],[5,5],[4,[1,6]],[5,6],[5,1]]"
// var precons_fixed = [[1,2],[2,4],[3,4],[3,5],[6,2]]

// n=7 especial con 5 precondiciones: select_4_7_ab_de_be_dc_fb
// var data_s = "[[0,[1,3]],[1,[2,7]],[2,[3,5]],[3,[3,7]],[4,[2,3]],[5,3],[5,2],[4,[4,7]],[5,7],[5,4],[3,[4,7]],[4,[5,7]],[5,5],[5,7],[4,4],[],[],[2,[2,3]],[3,[2,4]],[4,4],[],[],[4,2],[],[],[3,[3,6]],[4,[6,7]],[5,7],[5,6],[4,[3,7]],[5,7],[5,3],[1,[1,6]],[2,[2,7]],[3,2],[],[],[],[],[],[],[3,[6,7]],[4,7],[],[],[4,6],[],[],[2,[1,7]],[3,[2,7]],[4,2],[],[],[4,7],[],[],[3,1],[],[],[],[],[],[]]"
// var precons_fixed = [[1,2],[2,5],[4,3],[4,5],[6,2]]

// n=7 especial con 6 precondiciones: select_3_7_ac_bc_de_ae_db_af
var data_s = "[[0,[2,7]],[1,[5,6]],[2,[5,7]],[3,[2,5]],[4,[3,5]],[5,3],[5,5],[4,[2,6]],[5,2],[5,6],[3,[1,7]],[4,[3,7]],[5,3],[5,7],[4,1],[],[],[2,[6,7]],[3,[2,6]],[4,[3,6]],[5,3],[5,6],[4,[2,5]],[5,2],[5,5],[3,[1,7]],[4,[3,7]],[5,3],[5,7],[4,1],[],[],[1,[2,5]],[2,[2,6]],[3,[1,2]],[4,2],[],[],[4,1],[],[],[3,[4,6]],[4,[6,7]],[5,7],[5,6],[4,[4,7]],[5,7],[5,4],[2,[6,7]],[3,[5,7]],[4,[5,6]],[5,6],[5,5],[4,[4,7]],[5,7],[5,4],[3,[5,6]],[4,[5,7]],[5,7],[5,5],[4,[4,6]],[5,6],[5,4]]"
var precons_fixed = [[1,3],[1,5],[1,6],[2,3],[4,2],[4,5]]




// ---------------------------------------------------------------
var data = JSON.parse(data_s);
// console.log(data)
// console.log(data.length)

var level = 0;
var comps = 5; 
// var comps = 10;
// var precons_fixed = []
var len = Math.pow(2, comps - level + 1) - 1;

var root = generate_tree(data, 0, 0, comps);
var level_nodes = get_level_nodes(root, level, data);

for (let i = 0; i < level_nodes.length; i++) {
    const node = level_nodes[i];
    const index = node.data;

    const pattern_arr = []    
    for (let j = 0; j < len; j++) {
        const element = data[index + j];
        pattern_arr.push(element);
    }

    // console.log(JSON.stringify(pattern_arr));

    var vars_old = get_variables_old(pattern_arr);
    var precons = get_preconditions(node, vars_old, data, precons_fixed);
    
    var vars = get_variables(precons, pattern_arr);
    var preconds_str = get_precondition_str(precons, vars);
    
    var params = get_parameter_list(vars);
    var params = get_parameter_list(vars_old);

    var p = analyze_pattern(pattern_arr);
    
    // var n = Object.keys(vars).length;
    var n = Object.keys(vars_old).length;
    var comps2 = comps - level;

    // var values = common.perm(common.iota(n));
    // tests.reverse();
    // console.log(JSON.stringify(tests));


    var constraints_res = get_constraints(precons, pattern_arr, comps2);
    var pos = analysis(n, vars, constraints_res.c, constraints_res.final);

    var function_name = `select_${pos}_${n}_${preconds_str}(${params});`.replace("_(", "(");
    console.log(function_name);

    var code = generate_code(n, pattern_arr, 0, 0, comps2, vars);
    console.log(code);

    // break;
}






// for (let i = 0; i < indexes.length; i++) {
//     const index = indexes[i];
//     const pattern_arr = []    
//     for (let j = 0; j < len; j++) {
//         const element = data[index + j];
//         // console.log(element);
//         pattern_arr.push(element);
//     }

//     var xxx = get_ancestor(index, level, data);
//     console.log(xxx)

//     var p = analyze_pattern(pattern_arr);
//     console.log(p);

//     var vars = get_variables(pattern_arr);

//     var n = Object.keys(vars).length;
//     var comps2 = comps - level;

//     var values = common.perm(common.iota(n));
//     // tests.reverse();
//     // console.log(JSON.stringify(tests));

//     // var code = generate_code(n, pattern_arr, 0, 0, comps2, vars);
//     // console.log(code);

//     // var root = generate_tree(pattern_arr, 0, 0, comps2, vars);
//     // console.log(root);

//     // var level_7_nodes = get_level_nodes(root, level, data);
//     // console.log(level_7_nodes)

//     break;
// }


