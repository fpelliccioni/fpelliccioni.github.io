const common = require('./common');

var __try = 0;

function recursive(level, n, values, pairs, used_par, cmp_n, cmp_max) {
    var nodes = [];
    // var values = values_par.slice();
    var used = used_par.slice();
    var first_not_used_min = used.indexOf(false);
    var first_not_used = first_not_used_min;

    while (true) {
        used[first_not_used] = true;
        var selected_left = pairs[first_not_used];
        var selected_right = selected_left.slice().reverse();
        
        var new_values_left = common.remove_values(values, selected_left);
        var new_values_right = common.remove_values(values, selected_right);

        ++cmp_n;
        ++__try;

        if (__try % 100000 == 0) {
            console.log(__try);
            common.print_bool_arr(used);
        }

        // if (level == 7) {
        //     if (selected_left[0] == 5 && selected_left[1] == 7) {
        //         console.log();
        //     }
        // }

        // if (__try >= 574300000) {
        //     // [7,[5,7]]
        //     if (level == 7) {
        //         if (selected_left[0] == 5 && selected_left[1] == 7) {
        //             console.log();
        //         }
        //     }
        // }


        
        if (common.all_median_equals(n, new_values_left) && common.all_median_equals(n, new_values_right)) {
            return [true, [[level, selected_left]]];
            //TODO: que nivel tenemos siempre ac√°?
        }

        if (cmp_n == cmp_max) {
            var first_not_used_new = used.indexOf(false, first_not_used);
            if (first_not_used_new == -1) {
                return false, [];
            }
            used[first_not_used] = false;
            first_not_used = first_not_used_new;
            --cmp_n;
            continue;
        }

        var res_left = recursive(level + 1, n, new_values_left, pairs, used, cmp_n, cmp_max);

        if ( ! res_left[0]) {
            var first_not_used_new = used.indexOf(false, first_not_used);
            if (first_not_used_new == -1) {
                return false, [];
            }
            used[first_not_used] = false;
            first_not_used = first_not_used_new;
            --cmp_n;
            continue;
        } 

        var res_right = recursive(level + 1, n, new_values_right, pairs, used, cmp_n, cmp_max);
        if (!res_right[0]) {
            // nodes = remove_level(nodes, level);
            var first_not_used_new = used.indexOf(false, first_not_used);
            if (first_not_used_new == -1) {
                return false, [];
            }
            used[first_not_used] = false;
            first_not_used = first_not_used_new;
            --cmp_n;
            continue;
        }

        nodes.push(...res_left[1]);
        nodes.push(...res_right[1]);
        nodes.push([level, selected_left]);
        return [true, nodes];
    }
}

function tree(n, comps) {

    // var pairs = gen_pairs(n);

    // pairs for n=7
    // var pairs = [
    //     [1, 2],
    //     [3, 4],
    //     [2, 4],
    //     [5, 6],
    //     [2, 6],
    //     [3, 5],
    //     [2, 7],
    //     [5, 7],
    //     [4, 5],
    //     [1, 3],
    //     [1, 4],
    //     [1, 5],
    //     [1, 6],
    //     [1, 7],
    //     [2, 3],
    //     [2, 5],
    //     [3, 6],
    //     [3, 7],
    //     [4, 6],
    //     [4, 7],
    //     [6, 7]
    // ];

    var pairs = [
        [1, 2],
        [3, 4],
        [2, 4],
        [5, 6],
        [2, 5],
        [3, 5],
        [1, 3],
        [5, 7],
        [2, 6],
        [3, 6],
        [2, 7],
        [4, 5],
        [1, 4],
        [1, 5],
        [1, 6],
        [1, 7],
        [2, 3],
        [3, 7],
        [4, 6],
        [4, 7],
        [6, 7]
    ];

             
    
    // console.log(JSON.stringify(pairs));
  
    var used_pairs = common.gen_empty_array(n);
    var possible_values = common.perm(common.iota(n));
    // console.log(pairs);
             
    var res = recursive(0, n, possible_values, pairs, used_pairs, 0, comps);
    console.log(res[0]);
    console.log(res[1]);
    console.log(JSON.stringify(res[1]));
}

function main() {
    var tests = [
        // [3, 3],
        // [5, 6],
        [7, 10],
        // [9, 14],
    ];

    for (let i = 0; i < tests.length; i++) {
        const e = tests[i];
        tree(e[0], e[1]);
    }
}

main();


// console.log(perm([1, 2, 3, 4]));
// console.log(perm([1, 2, 3, 4]).join("\n"));
// console.log(iota(4));


// [[9,[1,3]],[9,[2,5]],[8,[4,5]],[9,[4,7]],[9,[4,5]],[8,[3,7]],[7,[5,7]],[9,[1,3]],[9,[1,7]],[8,[4,5]],[9,[2,3]],[9,[1,5]],[8,[2,5]],[7,[5,7]],[6,[2,7]],[9,[2,3]],[9,[5,7]],[8,[3,7]],[9,[6,7]],[9,[4,5]],[8,[5,7]],[7,[3,6]],[9,[2,5]],[9,[3,7]],[8,[2,3]],[9,[1,7]],[9,[4,5]],[8,[5,7]],[7,[1,3]],[6,[2,7]],[5,[3,5]],[9,[6,7]],[9,[2,7]],[8,[5,7]],[9,[6,7]],[9,[2,3]],[8,[3,6]],[7,[3,5]],[9,[3,5]],[9,[1,7]],[8,[2,7]],[9,[3,5]],[9,[1,6]],[8,[3,6]],[7,[6,7]],[6,[3,7]],[9,[1,6]],[9,[5,7]],[8,[6,7]],[9,[1,5]],[9,[6,7]],[8,[1,6]],[7,[1,7]],[9,[1,6]],[9,[3,7]],[8,[1,7]],[9,[1,7]],[9,[3,6]],[8,[1,6]],[7,[6,7]],[6,[3,5]],[5,[1,3]],[4,[2,6]],[9,[4,6]],[9,[3,5]],[8,[3,6]],[9,[4,7]],[9,[3,5]],[8,[2,7]],[7,[6,7]],[9,[2,3]],[9,[6,7]],[8,[3,6]],[9,[2,7]],[9,[6,7]],[8,[5,7]],[7,[3,5]],[6,[3,7]],[9,[2,3]],[9,[5,7]],[8,[3,5]],[9,[6,7]],[9,[1,7]],[8,[1,6]],[7,[2,7]],[9,[5,7]],[9,[3,5]],[8,[2,7]],[9,[3,6]],[9,[1,6]],[8,[1,3]],[7,[2,3]],[6,[3,7]],[5,[2,6]],[8,[2,6]],[9,[6,7]],[9,[3,7]],[8,[3,6]],[7,[5,7]],[9,[1,5]],[9,[6,7]],[8,[5,7]],[9,[1,6]],[9,[5,7]],[8,[1,5]],[7,[1,7]],[6,[1,3]],[8,[5,7]],[9,[2,3]],[9,[5,7]],[8,[1,3]],[7,[2,6]],[9,[1,3]],[9,[5,7]],[8,[3,7]],[9,[1,5]],[9,[3,7]],[8,[1,3]],[7,[1,7]],[6,[2,7]],[5,[3,5]],[4,[2,5]],[3,[5,6]],[9,[2,5]],[9,[1,6]],[8,[1,5]],[9,[2,6]],[9,[4,7]],[8,[2,7]],[7,[5,7]],[9,[2,6]],[9,[1,6]],[8,[1,4]],[9,[5,7]],[9,[3,7]],[8,[3,5]],[7,[4,7]],[6,[4,5]],[9,[3,6]],[9,[5,7]],[8,[6,7]],[9,[3,5]],[9,[6,7]],[8,[3,6]],[7,[3,7]],[9,[6,7]],[9,[1,4]],[8,[1,6]],[8,[2,6]],[7,[5,7]],[6,[1,3]],[5,[4,6]],[9,[6,7]],[9,[1,4]],[8,[4,7]],[9,[4,7]],[9,[1,6]],[8,[6,7]],[7,[4,6]],[9,[4,5]],[9,[1,6]],[8,[1,5]],[9,[1,5]],[9,[4,6]],[8,[4,5]],[7,[1,4]],[6,[5,7]],[9,[1,3]],[9,[6,7]],[8,[1,6]],[9,[1,6]],[9,[3,7]],[8,[1,3]],[7,[3,6]],[9,[4,6]],[9,[3,7]],[8,[4,7]],[9,[4,7]],[9,[3,6]],[8,[4,6]],[7,[6,7]],[6,[1,4]],[5,[3,5]],[4,[1,7]],[9,[3,5]],[9,[4,6]],[8,[2,6]],[9,[3,7]],[9,[1,7]],[8,[1,3]],[7,[4,7]],[9,[2,6]],[9,[4,7]],[8,[2,7]],[9,[3,6]],[9,[1,6]],[8,[1,3]],[7,[4,6]],[6,[6,7]],[9,[2,7]],[9,[2,7]],[8,[3,5]],[9,[6,7]],[9,[1,5]],[8,[1,6]],[7,[2,6]],[9,[5,7]],[9,[1,6]],[8,[6,7]],[9,[2,6]],[9,[4,7]],[8,[5,7]],[7,[4,6]],[6,[1,7]],[5,[1,4]],[9,[1,5]],[9,[2,6]],[8,[1,4]],[9,[6,7]],[9,[3,7]],[8,[3,6]],[7,[5,7]],[9,[3,6]],[9,[1,6]],[8,[1,3]],[9,[4,7]],[9,[2,6]],[8,[5,7]],[7,[1,5]],[6,[1,7]],[9,[3,7]],[9,[1,4]],[8,[1,3]],[9,[4,7]],[9,[1,3]],[8,[3,7]],[7,[1,7]],[8,[2,7]],[9,[1,5]],[9,[2,7]],[8,[1,3]],[7,[2,6]],[6,[5,7]],[5,[3,5]],[4,[4,5]],[3,[5,6]],[2,[2,4]],[8,[3,5]],[9,[4,7]],[9,[6,7]],[8,[4,6]],[7,[4,5]],[9,[2,3]],[9,[1,5]],[8,[2,5]],[9,[2,5]],[9,[1,3]],[8,[2,3]],[7,[3,5]],[6,[2,4]],[9,[3,5]],[9,[1,7]],[8,[3,7]],[9,[3,5]],[9,[1,4]],[8,[2,4]],[7,[4,7]],[8,[3,5]],[9,[1,5]],[9,[3,7]],[8,[1,7]],[7,[2,4]],[6,[1,3]],[5,[2,7]],[9,[4,5]],[9,[4,7]],[8,[3,7]],[9,[3,7]],[9,[4,5]],[8,[2,3]],[7,[2,4]],[9,[2,4]],[9,[3,7]],[8,[2,3]],[9,[1,7]],[9,[2,4]],[8,[1,5]],[7,[1,3]],[6,[2,7]],[9,[4,7]],[9,[1,3]],[8,[4,5]],[9,[1,3]],[9,[2,5]],[8,[4,5]],[7,[2,7]],[9,[2,7]],[9,[4,5]],[8,[2,5]],[9,[1,4]],[9,[2,7]],[8,[1,3]],[7,[1,5]],[6,[2,4]],[5,[3,5]],[4,[5,7]],[9,[2,4]],[9,[1,6]],[8,[1,5]],[9,[2,7]],[9,[3,7]],[8,[2,4]],[7,[5,7]],[9,[2,4]],[9,[1,6]],[8,[1,3]],[9,[4,7]],[9,[4,5]],[8,[5,7]],[7,[3,7]],[6,[3,5]],[9,[1,6]],[9,[2,4]],[8,[1,3]],[9,[4,7]],[9,[4,5]],[8,[5,7]],[7,[6,7]],[9,[2,4]],[9,[1,3]],[8,[1,4]],[9,[2,4]],[9,[6,7]],[8,[2,7]],[7,[4,7]],[6,[4,6]],[5,[3,6]],[9,[1,4]],[9,[6,7]],[8,[1,6]],[9,[1,6]],[9,[4,7]],[8,[1,4]],[7,[4,6]],[9,[3,6]],[9,[4,7]],[8,[3,7]],[9,[3,7]],[9,[4,6]],[8,[3,6]],[7,[6,7]],[6,[1,3]],[9,[3,5]],[9,[1,6]],[8,[1,5]],[9,[1,5]],[9,[3,6]],[8,[3,5]],[7,[1,3]],[9,[4,6]],[9,[1,3]],[8,[1,4]],[9,[3,6]],[9,[1,4]],[8,[4,6]],[7,[1,6]],[6,[4,5]],[5,[5,7]],[4,[1,7]],[3,[2,6]],[9,[3,6]],[9,[4,7]],[8,[4,6]],[9,[3,7]],[9,[4,6]],[8,[4,7]],[7,[6,7]],[9,[4,5]],[9,[4,7]],[8,[5,7]],[8,[5,7]],[7,[2,7]],[6,[2,6]],[9,[3,6]],[9,[5,7]],[8,[2,6]],[9,[4,7]],[9,[1,7]],[8,[1,4]],[7,[2,7]],[9,[3,7]],[9,[5,7]],[8,[2,7]],[9,[4,6]],[9,[1,6]],[8,[1,4]],[7,[2,6]],[6,[6,7]],[5,[2,4]],[9,[2,4]],[9,[3,6]],[8,[2,6]],[9,[4,7]],[9,[1,7]],[8,[1,4]],[7,[3,7]],[9,[2,4]],[9,[3,7]],[8,[2,7]],[9,[4,6]],[9,[1,6]],[8,[1,4]],[7,[3,6]],[6,[6,7]],[9,[2,7]],[9,[2,7]],[8,[2,4]],[9,[6,7]],[9,[1,5]],[8,[1,6]],[7,[2,6]],[9,[5,7]],[9,[1,6]],[8,[6,7]],[9,[2,4]],[9,[3,7]],[8,[5,7]],[7,[3,6]],[6,[1,7]],[5,[1,3]],[4,[2,3]],[9,[6,7]],[9,[4,5]],[8,[4,6]],[9,[5,7]],[9,[4,6]],[8,[6,7]],[7,[4,7]],[9,[4,5]],[9,[4,7]],[8,[5,7]],[8,[5,7]],[7,[2,7]],[6,[2,6]],[9,[2,6]],[9,[4,7]],[8,[2,7]],[9,[2,7]],[9,[4,6]],[8,[2,6]],[7,[6,7]],[9,[2,6]],[9,[1,7]],[8,[2,7]],[9,[2,7]],[9,[1,6]],[8,[2,6]],[7,[6,7]],[6,[1,4]],[5,[2,4]],[9,[2,6]],[9,[1,7]],[8,[2,7]],[9,[4,5]],[9,[1,7]],[8,[4,7]],[7,[2,4]],[9,[1,5]],[9,[4,7]],[8,[1,7]],[9,[2,4]],[9,[4,7]],[8,[3,7]],[7,[1,3]],[6,[1,4]],[9,[6,7]],[9,[4,7]],[8,[4,6]],[9,[1,5]],[9,[1,5]],[8,[2,4]],[7,[4,5]],[9,[6,7]],[9,[1,7]],[8,[1,6]],[9,[2,6]],[9,[4,5]],[8,[2,4]],[7,[1,5]],[6,[1,4]],[5,[5,7]],[4,[2,5]],[3,[3,5]],[2,[5,6]],[1,[3,4]],[9,[4,5]],[9,[2,6]],[8,[2,4]],[9,[1,7]],[9,[6,7]],[8,[1,6]],[7,[1,5]],[9,[1,5]],[9,[1,5]],[8,[2,4]],[9,[4,7]],[9,[6,7]],[8,[4,6]],[7,[4,5]],[6,[1,4]],[9,[4,7]],[9,[2,4]],[8,[3,7]],[9,[4,7]],[9,[1,5]],[8,[1,7]],[7,[1,3]],[9,[1,7]],[9,[4,5]],[8,[4,7]],[9,[1,7]],[9,[2,6]],[8,[2,7]],[7,[2,4]],[6,[1,4]],[5,[5,7]],[9,[1,6]],[9,[2,7]],[8,[2,6]],[9,[1,7]],[9,[2,6]],[8,[2,7]],[7,[6,7]],[9,[4,6]],[9,[2,7]],[8,[2,6]],[9,[4,7]],[9,[2,6]],[8,[2,7]],[7,[6,7]],[6,[1,4]],[8,[5,7]],[9,[4,7]],[9,[4,5]],[8,[5,7]],[7,[2,7]],[9,[4,6]],[9,[5,7]],[8,[6,7]],[9,[4,5]],[9,[6,7]],[8,[4,6]],[7,[4,7]],[6,[2,6]],[5,[2,4]],[4,[2,5]],[9,[3,7]],[9,[2,4]],[8,[5,7]],[9,[1,6]],[9,[5,7]],[8,[6,7]],[7,[3,6]],[9,[1,5]],[9,[6,7]],[8,[1,6]],[9,[2,7]],[9,[2,7]],[8,[2,4]],[7,[2,6]],[6,[1,7]],[9,[1,6]],[9,[4,6]],[8,[1,4]],[9,[3,7]],[9,[2,4]],[8,[2,7]],[7,[3,6]],[9,[1,7]],[9,[4,7]],[8,[1,4]],[9,[3,6]],[9,[2,4]],[8,[2,6]],[7,[3,7]],[6,[6,7]],[5,[1,3]],[9,[1,6]],[9,[4,6]],[8,[1,4]],[9,[5,7]],[9,[3,7]],[8,[2,7]],[7,[2,6]],[9,[1,7]],[9,[4,7]],[8,[1,4]],[9,[5,7]],[9,[3,6]],[8,[2,6]],[7,[2,7]],[6,[6,7]],[8,[5,7]],[9,[4,7]],[9,[4,5]],[8,[5,7]],[7,[2,7]],[9,[4,6]],[9,[3,7]],[8,[4,7]],[9,[4,7]],[9,[3,6]],[8,[4,6]],[7,[6,7]],[6,[2,6]],[5,[2,4]],[4,[2,3]],[3,[3,5]],[9,[1,4]],[9,[3,6]],[8,[4,6]],[9,[1,3]],[9,[4,6]],[8,[1,4]],[7,[1,6]],[9,[3,6]],[9,[1,5]],[8,[3,5]],[9,[1,6]],[9,[3,5]],[8,[1,5]],[7,[1,3]],[6,[4,5]],[9,[4,6]],[9,[3,7]],[8,[3,6]],[9,[4,7]],[9,[3,6]],[8,[3,7]],[7,[6,7]],[9,[4,7]],[9,[1,6]],[8,[1,4]],[9,[6,7]],[9,[1,4]],[8,[1,6]],[7,[4,6]],[6,[1,3]],[5,[5,7]],[9,[6,7]],[9,[2,4]],[8,[2,7]],[9,[1,3]],[9,[2,4]],[8,[1,4]],[7,[4,7]],[9,[4,5]],[9,[4,7]],[8,[5,7]],[9,[2,4]],[9,[1,6]],[8,[1,3]],[7,[6,7]],[6,[4,6]],[9,[4,5]],[9,[4,7]],[8,[5,7]],[9,[1,6]],[9,[2,4]],[8,[1,3]],[7,[3,7]],[9,[3,7]],[9,[2,7]],[8,[2,4]],[9,[1,6]],[9,[2,4]],[8,[1,5]],[7,[5,7]],[6,[3,5]],[5,[3,6]],[4,[1,7]],[9,[2,7]],[9,[1,4]],[8,[1,3]],[9,[4,5]],[9,[2,7]],[8,[2,5]],[7,[1,5]],[9,[2,5]],[9,[1,3]],[8,[4,5]],[9,[1,3]],[9,[4,7]],[8,[4,5]],[7,[2,7]],[6,[2,4]],[9,[2,4]],[9,[1,7]],[8,[1,5]],[9,[3,7]],[9,[2,4]],[8,[2,3]],[7,[1,3]],[9,[4,5]],[9,[3,7]],[8,[2,3]],[9,[4,7]],[9,[4,5]],[8,[3,7]],[7,[2,4]],[6,[2,7]],[5,[3,5]],[9,[3,7]],[9,[1,5]],[8,[1,7]],[8,[3,5]],[7,[2,4]],[9,[1,4]],[9,[3,5]],[8,[2,4]],[9,[1,7]],[9,[3,5]],[8,[3,7]],[7,[4,7]],[6,[1,3]],[9,[1,3]],[9,[2,5]],[8,[2,3]],[9,[1,5]],[9,[2,3]],[8,[2,5]],[7,[3,5]],[9,[6,7]],[9,[4,7]],[8,[4,6]],[8,[3,5]],[7,[4,5]],[6,[2,4]],[5,[2,7]],[4,[5,7]],[3,[2,6]],[2,[5,6]],[9,[2,7]],[9,[1,5]],[8,[1,3]],[8,[2,7]],[7,[2,6]],[9,[1,3]],[9,[4,7]],[8,[3,7]],[9,[1,4]],[9,[3,7]],[8,[1,3]],[7,[1,7]],[6,[5,7]],[9,[2,6]],[9,[4,7]],[8,[5,7]],[9,[1,6]],[9,[3,6]],[8,[1,3]],[7,[1,5]],[9,[3,7]],[9,[6,7]],[8,[3,6]],[9,[2,6]],[9,[1,5]],[8,[1,4]],[7,[5,7]],[6,[1,7]],[5,[3,5]],[9,[4,7]],[9,[2,6]],[8,[5,7]],[9,[1,6]],[9,[5,7]],[8,[6,7]],[7,[4,6]],[9,[1,5]],[9,[6,7]],[8,[1,6]],[9,[2,7]],[9,[2,7]],[8,[3,5]],[7,[2,6]],[6,[1,7]],[9,[1,6]],[9,[3,6]],[8,[1,3]],[9,[4,7]],[9,[2,6]],[8,[2,7]],[7,[4,6]],[9,[1,7]],[9,[3,7]],[8,[1,3]],[9,[4,6]],[9,[3,5]],[8,[2,6]],[7,[4,7]],[6,[6,7]],[5,[1,4]],[4,[4,5]],[9,[3,6]],[9,[4,7]],[8,[4,6]],[9,[3,7]],[9,[4,6]],[8,[4,7]],[7,[6,7]],[9,[3,7]],[9,[1,6]],[8,[1,3]],[9,[6,7]],[9,[1,3]],[8,[1,6]],[7,[3,6]],[6,[1,4]],[9,[4,6]],[9,[1,5]],[8,[4,5]],[9,[1,6]],[9,[4,5]],[8,[1,5]],[7,[1,4]],[9,[1,6]],[9,[4,7]],[8,[6,7]],[9,[1,4]],[9,[6,7]],[8,[4,7]],[7,[4,6]],[6,[5,7]],[5,[3,5]],[8,[2,6]],[9,[1,4]],[9,[6,7]],[8,[1,6]],[7,[5,7]],[9,[6,7]],[9,[3,5]],[8,[3,6]],[9,[5,7]],[9,[3,6]],[8,[6,7]],[7,[3,7]],[6,[1,3]],[9,[3,7]],[9,[5,7]],[8,[3,5]],[9,[1,6]],[9,[2,6]],[8,[1,4]],[7,[4,7]],[9,[4,7]],[9,[2,6]],[8,[2,7]],[9,[1,6]],[9,[2,5]],[8,[1,5]],[7,[5,7]],[6,[4,5]],[5,[4,6]],[4,[1,7]],[3,[5,6]],[9,[3,7]],[9,[1,5]],[8,[1,3]],[9,[5,7]],[9,[1,3]],[8,[3,7]],[7,[1,7]],[9,[5,7]],[9,[2,3]],[8,[1,3]],[8,[5,7]],[7,[2,6]],[6,[2,7]],[9,[5,7]],[9,[1,6]],[8,[1,5]],[9,[6,7]],[9,[1,5]],[8,[5,7]],[7,[1,7]],[9,[3,7]],[9,[6,7]],[8,[3,6]],[8,[2,6]],[7,[5,7]],[6,[1,3]],[5,[3,5]],[9,[1,6]],[9,[3,6]],[8,[1,3]],[9,[3,5]],[9,[5,7]],[8,[2,7]],[7,[2,3]],[9,[1,7]],[9,[6,7]],[8,[1,6]],[9,[5,7]],[9,[2,3]],[8,[3,5]],[7,[2,7]],[6,[3,7]],[9,[6,7]],[9,[2,7]],[8,[5,7]],[9,[6,7]],[9,[2,3]],[8,[3,6]],[7,[3,5]],[9,[3,5]],[9,[4,7]],[8,[2,7]],[9,[3,5]],[9,[4,6]],[8,[3,6]],[7,[6,7]],[6,[3,7]],[5,[2,6]],[4,[2,5]],[9,[3,6]],[9,[1,7]],[8,[1,6]],[9,[3,7]],[9,[1,6]],[8,[1,7]],[7,[6,7]],[9,[6,7]],[9,[1,5]],[8,[1,6]],[9,[5,7]],[9,[1,6]],[8,[6,7]],[7,[1,7]],[6,[3,5]],[9,[1,6]],[9,[3,5]],[8,[3,6]],[9,[1,7]],[9,[3,5]],[8,[2,7]],[7,[6,7]],[9,[2,3]],[9,[6,7]],[8,[3,6]],[9,[2,7]],[9,[6,7]],[8,[5,7]],[7,[3,5]],[6,[3,7]],[5,[1,3]],[9,[4,5]],[9,[1,7]],[8,[5,7]],[9,[3,7]],[9,[2,5]],[8,[2,3]],[7,[1,3]],[9,[4,5]],[9,[6,7]],[8,[5,7]],[9,[5,7]],[9,[2,3]],[8,[3,7]],[7,[3,6]],[6,[2,7]],[9,[1,5]],[9,[2,3]],[8,[2,5]],[9,[1,7]],[9,[1,3]],[8,[4,5]],[7,[5,7]],[9,[4,5]],[9,[4,7]],[8,[3,7]],[9,[2,5]],[9,[1,3]],[8,[4,5]],[7,[5,7]],[6,[2,7]],[5,[3,5]],[4,[2,6]],[3,[5,6]],[2,[2,4]],[1,[3,4]],[0,[1,2]]]
